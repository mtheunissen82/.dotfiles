#!/bin/bash

GIT_TEMPLATE_DIR=~/.git_templates

git_branch_checkout_fzf() {
    local branches branch

    branches=$(git branch -avv | grep -v HEAD)
    branch=$(echo "$branches" | fzf-tmux --no-multi -d $(( 2 + $(wc -l <<< "$branches") )) )

    if [[ $branch ]]; then
        git checkout "$(echo "$branch" | awk '{print $1}' | sed "s/.* //")"
    fi
}

git_tag_checkout_fzf() {
    local branches branch

    branches=$(git branch -avv | grep -v HEAD)
    branch=$(echo "$branches" | fzf-tmux --no-multi -d $(( 2 + $(wc -l <<< "$branches") )) )

    if [[ $branch ]]; then
        git checkout "$(echo "$branch" | awk '{print $1}' | sed "s/.* //")"
    fi
}

git_checkout_fzf() {
    local branches tags tags_and_branches_merged checkout_target

    branches=$(git branch -avv | grep -v HEAD)
    tags=$(git tag)
    tags_and_branches_merged=$(echo "$branches"; echo "$tags")

    checkout_target=$(echo "$tags_and_branches_merged" | fzf-tmux --no-multi -d $(( 2 + $(wc -l <<< "$tags_and_branches_merged") )) )

    if [[ $checkout_target ]]; then
        git checkout "$(echo "$checkout_target" | awk '{print $1}' | sed "s/.* //")"
    fi
}

git_create_branch_with_template() {
    local template=$1
    local template_file branch_to_create

    if [[ $# -lt 1 ]]; then
        echo "At least a template must be specified" 1>&2
        return 1
    fi

    template_file="${GIT_TEMPLATE_DIR}/${template}"
    if [[ ! -f "$template_file" ]]; then
        echo "Template file for \"$template\" not found in \"$GIT_TEMPLATE_DIR\"" 1>&2
        return 1
    fi

    source "$template_file"

    shift

    branch_to_create=$(branch_template "$@")

    git checkout --no-track -b "$branch_to_create"
    git branch --set-upstream-to "origin/${branch_to_create}"
}

git_create_commit_with_template() {
    local template=$1
    local template_file commit_message

    if [[ $# -lt 1 ]]; then
        echo "At least a template must be specified" 1>&2
        return 1
    fi

    template_file="${GIT_TEMPLATE_DIR}/${template}"
    if [[ ! -f "$template_file" ]]; then
        echo "Template file for \"$template\" not found in \"$GIT_TEMPLATE_DIR\"" 1>&2
        return 1
    fi

    source "$template_file"

    shift

    commit_message=$(commit_template "$@")
    git commit --edit --message "$commit_message"
}

git_get_current_branch() {
    git branch --list | grep '^\*' | awk '{print $2}'
}

git_reset_file_fzf() {
    local reset_files reset_selection

    reset_files=$(git diff --cached --name-only)
    reset_selection=$(echo -n "$reset_files" | fzf-tmux --multi -d $(( 2 + $(wc -l <<< "$reset_files") )))

    if [[ $reset_selection ]]; then
        git reset HEAD -- $reset_selection
    fi
}

git_checkout_file_fzf() {
    local checkout_files checkout_selection

    checkout_files=$(git status -s | grep -E '^(A|\s?M)' | awk '{print $2}')
    checkout_selection=$(echo -n "$checkout_files" | fzf-tmux --multi --ansi --preview 'git diff --color {} | delta')

    if [[ $checkout_selection ]]; then
        git checkout -- $checkout_selection
    fi
}

git_add_file_fzf() {
    local add_files add_selection
    local git_root_path=$(git rev-parse --show-toplevel)

    add_files=$(git ls-files -om --exclude-standard --full-name -- "$git_root_path")
    add_selection=$(echo -n "$add_files" | fzf-tmux --multi --ansi --preview 'git diff --color {} | delta')

    if [[ $add_selection ]]; then
        git add -- $add_selection
    fi
}

git_branch_delete_fzf() {
    local branches branch_selection

    branches=$(git branch --list | grep -v '^\*' | awk '{print $1}')
    branch_selection=$(echo -n "$branches" | fzf-tmux --multi -d $(( 2 + $(wc -l <<< "$branches") )))

    if [[ $branch_selection ]]; then
        git branch -d $branch_selection
    fi
}

git_log_file_fzf() {
    local first_arg="$1"
    local file_selection ls_files_selection
    local commit_selection
    local git_root_path=$(git rev-parse --show-toplevel)

    # If no argument is passed present all files in the repository
    if [[ -z "$first_arg" ]]; then
        ls_files_selection=$(git ls-files --full-name -- "$git_root_path" | fzf-tmux)
        file_selection="${git_root_path}/${ls_files_selection}"
    # If a "." argument is passed present all files below the current directory
    elif [[ "$first_arg" = "." ]]; then
        ls_files_selection=$(git ls-files --full-name -- "$(git_get_invocation_dir)" | fzf-tmux)
        file_selection="${git_root_path}/${ls_files_selection}"
    # Argument must be a file
    else
        file_selection="$(git_get_invocation_dir)/$first_arg"
    fi

    if [[ ! -f $file_selection ]]; then
        echo "Selected file not found: $file_selection" 2>&1
        return 1
    fi

    commit_selection=$(git log --no-decorate --follow --format='format:%h - %Cgreen%s%Creset - %an' "$file_selection" | fzf-tmux -d 100% --ansi --preview="git show --color --pretty=fuller {1} -- \"$file_selection\" | delta" | awk '{print $1}')

    if [[ $commit_selection ]]; then
        git show "$commit_selection" -- "$file_selection"
    fi
}

git_get_invocation_dir() {
    local git_root_path=$(git rev-parse --show-toplevel)

    if [[ $? -ne 0 ]]; then
        echo "This is not a git directory" 2>&1
        return 1
    fi

    if [[ -n "$GIT_PREFIX" ]]; then
        echo "$git_root_path/$GIT_PREFIX"
    else
        echo "$PWD"
    fi
}
