#!/bin/bash

GIT_TEMPLATE_DIR=~/.git_templates

git_branch_checkout_fzf() {
    local branches branch

    branches=$(git branch -avv | grep -v HEAD)
    branch=$(echo "$branches" | fzf-tmux --no-multi -d $(( 2 + $(wc -l <<< "$branches") )) )

    if [[ $branch ]]; then
        git checkout "$(echo "$branch" | awk '{print $1}' | sed "s/.* //")"
    fi
}

git_tag_checkout_fzf() {
    local branches branch

    branches=$(git branch -avv | grep -v HEAD)
    branch=$(echo "$branches" | fzf-tmux --no-multi -d $(( 2 + $(wc -l <<< "$branches") )) )

    if [[ $branch ]]; then
        git checkout "$(echo "$branch" | awk '{print $1}' | sed "s/.* //")"
    fi
}

git_checkout_fzf() {
    local branches tags tags_and_branches_merged checkout_target

    branches=$(git branch -avv | grep -v HEAD)
    tags=$(git tag)
    tags_and_branches_merged=$(echo "$branches"; echo "$tags")

    checkout_target=$(echo "$tags_and_branches_merged" | fzf-tmux --no-multi -d $(( 2 + $(wc -l <<< "$tags_and_branches_merged") )) )

    if [[ $checkout_target ]]; then
        git checkout "$(echo "$checkout_target" | awk '{print $1}' | sed "s/.* //")"
    fi
}

git_create_branch_with_template() {
    local template=$1
    local template_file branch_to_create

    if [[ $# -lt 1 ]]; then
        echo "At least a template must be specified" 1>&2
        return 1
    fi

    template_file="${GIT_TEMPLATE_DIR}/${template}"
    if [[ ! -f "$template_file" ]]; then
        echo "Template file for \"$template\" not found in \"$GIT_TEMPLATE_DIR\"" 1>&2
        return 1
    fi

    source "$template_file"

    shift

    branch_to_create=$(branch_template "$@")

    git checkout --no-track -b "$branch_to_create"
    git branch --set-upstream-to "origin/${branch_to_create}"
}

git_create_commit_with_template() {
    local template=$1
    local template_file commit_message

    if [[ $# -lt 1 ]]; then
        echo "At least a template must be specified" 1>&2
        return 1
    fi

    template_file="${GIT_TEMPLATE_DIR}/${template}"
    if [[ ! -f "$template_file" ]]; then
        echo "Template file for \"$template\" not found in \"$GIT_TEMPLATE_DIR\"" 1>&2
        return 1
    fi

    source "$template_file"

    shift

    commit_message=$(commit_template "$@")
    git commit --edit --message "$commit_message"
}

git_get_current_branch() {
    git branch --list | grep '^*' | awk '{ print $2 }'
}

git_reset_file_fzf() {
    local reset_files reset_selection

    reset_files=$(git diff --cached --name-only)
    reset_selection=$(echo -n "$reset_files" | fzf-tmux --multi -d $(( 2 + $(wc -l <<< "$reset_files") )))

    git reset HEAD -- $reset_selection
}

git_checkout_file_fzf() {
    local checkout_files checkout_selection

    checkout_files=$(git status --porcelain | grep -E '^(A|\s?M)' | awk '{print $2}')
    checkout_selection=$(echo -n "$checkout_files" | fzf-tmux --multi -d $(( 2 + $(wc -l <<< "$checkout_files") )))

    git checkout -- $checkout_selection
}

git_add_file_fzf() {
    local add_files add_selection

    add_files=$(git diff --name-only)
    add_selection=$(echo -n "$add_files" | fzf-tmux --multi -d $(( 2 + $(wc -l <<< "$add_files") )))

    git add -- $add_selection
}

git_branch_delete_fzf() {
    local branches branch_selection

    branches=$(git branch --list | grep -v '^*')
    branch_selection=$(echo -n "$branches" | fzf-tmux --multi -d $(( 2 + $(wc -l <<< "$branches") )))

    if [[ $branch_selection ]]; then
        git branch -d "$branch_selection"
    fi
}
