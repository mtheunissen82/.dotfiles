#!/usr/bin/env bash

# Settings
TWOFA_HOME="$HOME/.2fa"
TWOFA_GPG_RECIPIENT="emtyr@protonmail.com"
TWOFA_GPG_KEYID="B12E08475E0604B876785CEC34D6AACD8F195D67"

# Required binaries
GPG_BIN=$(which gpg)
OATHTOOL_BIN=$(which oathtool)

# Misc.
MACHINE_OS="$(uname -s)"

# Configure TTY
export GPG_TTY=$(tty)

__2fa_init() {
    [[ -z $GPG_BIN ]] && echo "gpg binary not found" >&2 && exit 1
    [[ -z $OATHTOOL_BIN ]] && echo "oathtool binary not found" >&2 && exit 1

    mkdir -p $TWOFA_HOME
}

__2fa_list() {
    tree -C $TWOFA_HOME | sed '1s/.*/2fa store/' | sed 's/.gpg//'
}

__2fa_create_service() {
    local service="$1"
    local secret="$2"

    echo -n "$secret" | $GPG_BIN --encrypt --sign --armor --local-user "$TWOFA_GPG_KEYID" --recipient "$TWOFA_GPG_RECIPIENT" --output "$(__2fa_service_file_path $service)"
}

# Generate service file path based on given service name
__2fa_service_file_path() {
    local service="$1"
    echo -n "${TWOFA_HOME}/${service}.gpg"
}

__2fa_generate_totp() {
    local service="$1"
    shift

    # print totp code to stdout or clipboard (default)
    local option_print=unset

    while getopts "p" option; do
        case "${option}" in
            p)
                option_print=1
                ;;
            *)
                __2fa_print_help
                ;;
        esac
    done
    shift $((OPTIND-1))

    [[ ! -s "$(__2fa_service_file_path $service)" ]] && {
        echo "Service not found" >&2
        return 1
    }

    local secret="$($GPG_BIN --decrypt --quiet --local-user "$TWOFA_GPG_KEYID" --recipient "$TWOFA_GPG_RECIPIENT" -- "$(__2fa_service_file_path $service)" 2>/dev/null)"

    [[ $? -ne 0 ]] && {
        echo "GPG error" >&2
        return 1
    }

    local totp_code="$($OATHTOOL_BIN --base32 --totp "$secret")"

    [[ $? -ne 0 ]] && {
        echo "Oathtool error" >&2
        return 1
    }

    # print the totp code
    if [[ $option_print -eq 1 ]]; then
        echo $totp_code
    # copy the totp code to clipboard
    else
        if [[ $MACHINE_OS == "Darwin" ]]; then
            echo -n $totp_code | pbcopy
        elif [[ $MACHINE_OS == "Linux" ]]; then
            # TODO: fix clipboard copy for Linux later
            echo "Linux clipboard not yet implemented" >&2
            return 1
        else
            echo "Clipboard functionality is not supported for machine OS \"${MACHINE_OS}\"" >&2
            return 1
        fi
    fi
}

__2fa_print_help() {
    local help="
Usage:
    2fa [COMMAND]

Commands:
    list (alias: l) - List available 2fa services.
    create SERVICE SECRET (alias: c) - Create a new totp service.
    generate SERVICE [-p] (alias: g) - Generate a totp code for a given service.
    help (alias: h) - Display help text."

    echo "$help" >&2 && return 1
}

2fa() {
    __2fa_init

    # If no positional parameters are provided, print the 2fa list and exit
    if [ $# -eq 0 ]; then
        __2fa_list
        return 0
    fi

    local command=$1
    shift

    case "$command" in
        "list" | "l")
            __2fa_list
            ;;
        "create" | "c")
            __2fa_create_service "$@"
            ;;
        "generate" | "g")
            __2fa_generate_totp "$@"
            ;;
        "help" | "h")
            __2fa_print_help
            ;;
        *)
            echo "Invalid command \"$command\"" >&2
            __2fa_print_help
            ;;
    esac
}

