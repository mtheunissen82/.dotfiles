#!/usr/bin/env bash

# Settings
TWOFA_HOME="$HOME/.2fa"
TWOFA_GPG_RECIPIENT="emtyr@protonmail.com"
TWOFA_GPG_KEYID="B12E08475E0604B876785CEC34D6AACD8F195D67"

# Binaries
GPG_BIN=$(which gpg)
OATHTOOL_BIN=$(which oathtool)

__2fa_init() {
    [[ -z $GPG_BIN ]] && echo "gpg binary not found" >&2 && exit 1
    [[ -z $OATHTOOL_BIN ]] && echo "oathtool binary not found" >&2 && exit 1

    mkdir -p $TWOFA_HOME
}

__2fa_list() {
    tree -C $TWOFA_HOME | sed '1s/.*/2fa store/' | sed 's/.gpg//'
}

__2fa_create_service() {
    local service="$1"
    local secret="$2"

    echo -n "$secret" | $GPG_BIN --encrypt --sign --armor --local-user "$TWOFA_GPG_KEYID" --recipient "$TWOFA_GPG_RECIPIENT" --output "$(__2fa_service_file $service)"
}

__2fa_service_file() {
    local service="$1"
    echo "${TWOFA_HOME}/${service}.gpg"
}

__2fa_generate_totp() {
    local service="$1"

    [[ -z "$(__2fa_service_file $service)" ]] && echo "Service not found" >&2 && exit 1

    local secret="$($GPG_BIN --decrypt --quiet --local-user "$TWOFA_GPG_KEYID" --recipient "$TWOFA_GPG_RECIPIENT" -- "$(__2fa_service_file $service)" 2>/dev/null)"
    local code="$($OATHTOOL_BIN --base32 --totp "$secret")"

    echo -n $code
}

__2fa_print_help() {
    local help="
Usage:
    2fa <command> [<args>...]

Commands:
    list - List available 2fa services.
        2fa list
        2fa l

    create - Create a new totp service.
        2fa create <service> <secret>
        2fa c <service> <secret>

    generate - Generate a totp code for a given service.
        2fa generate <service>
        2fa g <service>

    help - Display help text.
        2fa help
        2fa h"

    echo "$help" >&2 && return 1
}

2fa() {
    __2fa_init

    local command=$1

    case "$command" in
        "list" | "l")
            __2fa_list
            ;;
        "create" | "c")
            __2fa_create_service "$2" "$3"
            ;;
        "generate" | "g")
            __2fa_generate_totp "$2"
            ;;
        "help" | "h" | "")
            __2fa_print_help
            ;;
        *)
            echo "Invalid command" >&2
            __2fa_print_help
            ;;
    esac
}

