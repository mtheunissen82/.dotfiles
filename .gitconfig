[include]
    ; Include local settings
    path = ~/.gitconfig.local
[push]
    default = simple
[core]
    eol = lf
    editor = vim
    fileMode = false
    autocrlf = input
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore
[alias]
    ; General shortcuts
    s = status --short
    sv = status --verbose
    sh = "!f() { git show --patch-with-stat --color $1 | diff-so-fancy | less --tabs=4 -RFX; }; f"
    a = add
    ai = add --interactive
    ap = add --patch
    af = "!/usr/bin/env bash -i -c 'git_add_file_fzf \"$@\"' --"
    pu = push
    pua = push --all
    pm = pull --rebase=false
    pr = pull --rebase
    cp = cherry-pick
    cl = clone
    co = "!/usr/bin/env bash -i -c 'git_checkout_fzf' --"
    cf = "!/usr/bin/env bash -i -c 'git_checkout_file_fzf \"$@\"' --"
    br = branch
    fa = fetch --all
    ct = "!/usr/bin/env bash -i -c 'git_create_commit_with_template \"$@\"' --"
    bt = "!/usr/bin/env bash -i -c 'git_create_branch_with_template \"$@\"' --"
    bd = "!/usr/bin/env bash -i -c 'git_branch_delete_fzf \"$@\"' --"

    ; Diff and merge
    d = "!f() { git diff --patch-with-stat --color $1 | diff-so-fancy | less --tabs=4 -RFX; }; f"
    ds = diff --stat
    dc = "!f() { git diff --cached --color $1 | diff-so-fancy | less --tabs=4 -RFX; }; f"
    dt = difftool
    mt = mergetool

    ; Commit
    c = commit
    cm = commit -m
    ca = commit -a --amend -C HEAD

    ; Log
    ls = log --pretty=format:"%C(yellow)%h%C(auto)%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --all --graph
    ll = log --pretty=format:"%C(yellow)%h%C(auto)%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    ldr = log --pretty=format:"%C(yellow)%h\\ %ad%C(auto)%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lf = "!/usr/bin/env bash -i -c 'git_log_file_fzf \"$1\"' --"

    ; Reset
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    rf = "!/usr/bin/env bash -i -c 'git_reset_file_fzf \"$@\";' --"

    ; Stashing
    sp = stash --patch
    sl = stash list
    sa = stash apply
    ss = stash save
    sd = stash drop

    ; List aliases
    la = "!git config -l | grep alias | cut -c 7-"

    ; Find files
    f = "!git ls-files | grep -i"

    ; Grep files
    grep = grep -Iin
    gr = grep -Iin

    ; Combinations
    ; fetch and status
    fs = "!git fetch -av && git status -v"
    ; add, commit and push
    acp = "!f() { git add . && git commit -m \"$1\" && git push; }; f"
[color]
    ui = true
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = green bold
    changed = red bold
    untracked = red bold
[help]
    autocorrect = 50
[diff-so-fancy]
    stripLeadingSymbols = false
[fetch]
	prune = true
[merge]
   tool = intellij
[mergetool "intellij"]
   cmd = idea.sh merge $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")
   trustExitCode = true
[diff]
   tool = intellij
[difftool "intellij"]
   cmd = idea.sh diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")
[pull]
	rebase = false
